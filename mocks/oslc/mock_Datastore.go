// Code generated by mockery v2.46.3. DO NOT EDIT.

package oslc

import (
	context "context"

	oslc "github.com/chainalysis-oss/oslc"
	mock "github.com/stretchr/testify/mock"
)

// MockDatastore is an autogenerated mock type for the Datastore type
type MockDatastore struct {
	mock.Mock
}

type MockDatastore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatastore) EXPECT() *MockDatastore_Expecter {
	return &MockDatastore_Expecter{mock: &_m.Mock}
}

// Retrieve provides a mock function with given fields: ctx, name, version, distributor
func (_m *MockDatastore) Retrieve(ctx context.Context, name string, version string, distributor string) (oslc.Entry, error) {
	ret := _m.Called(ctx, name, version, distributor)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 oslc.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (oslc.Entry, error)); ok {
		return rf(ctx, name, version, distributor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) oslc.Entry); ok {
		r0 = rf(ctx, name, version, distributor)
	} else {
		r0 = ret.Get(0).(oslc.Entry)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, version, distributor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatastore_Retrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retrieve'
type MockDatastore_Retrieve_Call struct {
	*mock.Call
}

// Retrieve is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
//   - distributor string
func (_e *MockDatastore_Expecter) Retrieve(ctx interface{}, name interface{}, version interface{}, distributor interface{}) *MockDatastore_Retrieve_Call {
	return &MockDatastore_Retrieve_Call{Call: _e.mock.On("Retrieve", ctx, name, version, distributor)}
}

func (_c *MockDatastore_Retrieve_Call) Run(run func(ctx context.Context, name string, version string, distributor string)) *MockDatastore_Retrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDatastore_Retrieve_Call) Return(_a0 oslc.Entry, _a1 error) *MockDatastore_Retrieve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatastore_Retrieve_Call) RunAndReturn(run func(context.Context, string, string, string) (oslc.Entry, error)) *MockDatastore_Retrieve_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, entry
func (_m *MockDatastore) Save(ctx context.Context, entry oslc.Entry) error {
	ret := _m.Called(ctx, entry)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, oslc.Entry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatastore_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockDatastore_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - entry oslc.Entry
func (_e *MockDatastore_Expecter) Save(ctx interface{}, entry interface{}) *MockDatastore_Save_Call {
	return &MockDatastore_Save_Call{Call: _e.mock.On("Save", ctx, entry)}
}

func (_c *MockDatastore_Save_Call) Run(run func(ctx context.Context, entry oslc.Entry)) *MockDatastore_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oslc.Entry))
	})
	return _c
}

func (_c *MockDatastore_Save_Call) Return(_a0 error) *MockDatastore_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatastore_Save_Call) RunAndReturn(run func(context.Context, oslc.Entry) error) *MockDatastore_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatastore creates a new instance of MockDatastore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatastore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatastore {
	mock := &MockDatastore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
