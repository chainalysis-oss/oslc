// Code generated by mockery v2.50.1. DO NOT EDIT.

package metrics

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// MockhttpServer is an autogenerated mock type for the httpServer type
type MockhttpServer struct {
	mock.Mock
}

type MockhttpServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockhttpServer) EXPECT() *MockhttpServer_Expecter {
	return &MockhttpServer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockhttpServer) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockhttpServer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockhttpServer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockhttpServer_Expecter) Close() *MockhttpServer_Close_Call {
	return &MockhttpServer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockhttpServer_Close_Call) Run(run func()) *MockhttpServer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockhttpServer_Close_Call) Return(_a0 error) *MockhttpServer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockhttpServer_Close_Call) RunAndReturn(run func() error) *MockhttpServer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Serve provides a mock function with given fields: l
func (_m *MockhttpServer) Serve(l net.Listener) error {
	ret := _m.Called(l)

	if len(ret) == 0 {
		panic("no return value specified for Serve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(net.Listener) error); ok {
		r0 = rf(l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockhttpServer_Serve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serve'
type MockhttpServer_Serve_Call struct {
	*mock.Call
}

// Serve is a helper method to define mock.On call
//   - l net.Listener
func (_e *MockhttpServer_Expecter) Serve(l interface{}) *MockhttpServer_Serve_Call {
	return &MockhttpServer_Serve_Call{Call: _e.mock.On("Serve", l)}
}

func (_c *MockhttpServer_Serve_Call) Run(run func(l net.Listener)) *MockhttpServer_Serve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(net.Listener))
	})
	return _c
}

func (_c *MockhttpServer_Serve_Call) Return(_a0 error) *MockhttpServer_Serve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockhttpServer_Serve_Call) RunAndReturn(run func(net.Listener) error) *MockhttpServer_Serve_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockhttpServer creates a new instance of MockhttpServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockhttpServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockhttpServer {
	mock := &MockhttpServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
