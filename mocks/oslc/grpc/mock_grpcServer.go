// Code generated by mockery v2.50.1. DO NOT EDIT.

package grpc

import (
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"

	net "net"
)

// MockgrpcServer is an autogenerated mock type for the grpcServer type
type MockgrpcServer struct {
	mock.Mock
}

type MockgrpcServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockgrpcServer) EXPECT() *MockgrpcServer_Expecter {
	return &MockgrpcServer_Expecter{mock: &_m.Mock}
}

// GetServiceInfo provides a mock function with no fields
func (_m *MockgrpcServer) GetServiceInfo() map[string]grpc.ServiceInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServiceInfo")
	}

	var r0 map[string]grpc.ServiceInfo
	if rf, ok := ret.Get(0).(func() map[string]grpc.ServiceInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]grpc.ServiceInfo)
		}
	}

	return r0
}

// MockgrpcServer_GetServiceInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceInfo'
type MockgrpcServer_GetServiceInfo_Call struct {
	*mock.Call
}

// GetServiceInfo is a helper method to define mock.On call
func (_e *MockgrpcServer_Expecter) GetServiceInfo() *MockgrpcServer_GetServiceInfo_Call {
	return &MockgrpcServer_GetServiceInfo_Call{Call: _e.mock.On("GetServiceInfo")}
}

func (_c *MockgrpcServer_GetServiceInfo_Call) Run(run func()) *MockgrpcServer_GetServiceInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockgrpcServer_GetServiceInfo_Call) Return(_a0 map[string]grpc.ServiceInfo) *MockgrpcServer_GetServiceInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockgrpcServer_GetServiceInfo_Call) RunAndReturn(run func() map[string]grpc.ServiceInfo) *MockgrpcServer_GetServiceInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GracefulStop provides a mock function with no fields
func (_m *MockgrpcServer) GracefulStop() {
	_m.Called()
}

// MockgrpcServer_GracefulStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GracefulStop'
type MockgrpcServer_GracefulStop_Call struct {
	*mock.Call
}

// GracefulStop is a helper method to define mock.On call
func (_e *MockgrpcServer_Expecter) GracefulStop() *MockgrpcServer_GracefulStop_Call {
	return &MockgrpcServer_GracefulStop_Call{Call: _e.mock.On("GracefulStop")}
}

func (_c *MockgrpcServer_GracefulStop_Call) Run(run func()) *MockgrpcServer_GracefulStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockgrpcServer_GracefulStop_Call) Return() *MockgrpcServer_GracefulStop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockgrpcServer_GracefulStop_Call) RunAndReturn(run func()) *MockgrpcServer_GracefulStop_Call {
	_c.Run(run)
	return _c
}

// RegisterService provides a mock function with given fields: sd, ss
func (_m *MockgrpcServer) RegisterService(sd *grpc.ServiceDesc, ss interface{}) {
	_m.Called(sd, ss)
}

// MockgrpcServer_RegisterService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterService'
type MockgrpcServer_RegisterService_Call struct {
	*mock.Call
}

// RegisterService is a helper method to define mock.On call
//   - sd *grpc.ServiceDesc
//   - ss interface{}
func (_e *MockgrpcServer_Expecter) RegisterService(sd interface{}, ss interface{}) *MockgrpcServer_RegisterService_Call {
	return &MockgrpcServer_RegisterService_Call{Call: _e.mock.On("RegisterService", sd, ss)}
}

func (_c *MockgrpcServer_RegisterService_Call) Run(run func(sd *grpc.ServiceDesc, ss interface{})) *MockgrpcServer_RegisterService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*grpc.ServiceDesc), args[1].(interface{}))
	})
	return _c
}

func (_c *MockgrpcServer_RegisterService_Call) Return() *MockgrpcServer_RegisterService_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockgrpcServer_RegisterService_Call) RunAndReturn(run func(*grpc.ServiceDesc, interface{})) *MockgrpcServer_RegisterService_Call {
	_c.Run(run)
	return _c
}

// Serve provides a mock function with given fields: l
func (_m *MockgrpcServer) Serve(l net.Listener) error {
	ret := _m.Called(l)

	if len(ret) == 0 {
		panic("no return value specified for Serve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(net.Listener) error); ok {
		r0 = rf(l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockgrpcServer_Serve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serve'
type MockgrpcServer_Serve_Call struct {
	*mock.Call
}

// Serve is a helper method to define mock.On call
//   - l net.Listener
func (_e *MockgrpcServer_Expecter) Serve(l interface{}) *MockgrpcServer_Serve_Call {
	return &MockgrpcServer_Serve_Call{Call: _e.mock.On("Serve", l)}
}

func (_c *MockgrpcServer_Serve_Call) Run(run func(l net.Listener)) *MockgrpcServer_Serve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(net.Listener))
	})
	return _c
}

func (_c *MockgrpcServer_Serve_Call) Return(_a0 error) *MockgrpcServer_Serve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockgrpcServer_Serve_Call) RunAndReturn(run func(net.Listener) error) *MockgrpcServer_Serve_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockgrpcServer creates a new instance of MockgrpcServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockgrpcServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockgrpcServer {
	mock := &MockgrpcServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
